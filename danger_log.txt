Error Handling

we use boost::beast and boost::asio to provide connection and parsing for our proxy, so our error handling is based on ec(error code boost::beast::error_code) it provides.

1. When we process CONNECT request, we forward bytes between original server and client. When there is error, we close connection between client and server. Then we write bad_gateway to response and send it to client.

2. When we do basic request and response from proxy to server, we check error code everytime we do async_read and async_write. If async_read has error, we print "Response Read Error" to cerr. If async_write has error, we print "POST/GET Request Send Error" to cerr. If async_connect fails, we print "Connect Error" to cerr. Everytime a failure occurs, we send 502 bad gateway to client.

3. Everytime we have async operation, we check error code and handle that exception.

We achieved basic guarantee in this program. For a strong guarantee, it needs to roll back to state before the operation began when an exception is thrown. Given the complexity and unpredictability of network conditions, some issues like timeouts are often beyond the control of program and can be unpredictable.